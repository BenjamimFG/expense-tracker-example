FORMAT: 1A

# Expense Tracker

This is the API for an Expense Tracker application that allows users to track their own expenses through multiple wallets.

# Group Auth

Resources related to the authentication in the API.

## User Register [/register]

### Register a New User [POST]

This action registers a new user. It takes a JSON object containing the user's information.

+ displayName (string) - The user name that will be displayed in the application
+ email (string) - The user's email that will be used for login and optional notifications
+ phone (string) - The user's phone number that will be used for optional notifications
+ password (string) - The user's password that will be used for login
+ totalFundsCurrencyCode (string) - The Code of the currency used to display user's total funds

+ Request (application/json)
  
        {
            "displayName": "John Smith",
            "email": "john.smith@mail.com",
            "phone": "+5511912345678",
            "password": "mySecretPassword",
            "totalFundsCurrencyCode": "USD"
        }

+ Response 201 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "email": "john.smith@mail.com"
                }
            }

## User Login [/login]

### Login a User [POST]

This action lets a user login into the application. It takes a JSON object containing the user's email and password.

+ email (string) - The user's email.
+ password (string) - The user's password.

+ Request (application/json)

        {
            "email": "john.smith@mail.com",
            "password": "mySecretPassword"
        }

+ Response 200 (application/json)
    
    + Body

            {
                "success": true,
                "data": {
                    "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MCwiZGlzcGxheU5hbWUiOiJKb2huIFNtaXRoIiwiZW1haWwiOiJqb2huLnNtaXRoQG1haWwuY29tIiwicGhvbmUiOiIrNTUxMTkxMjM0NTY3OCIsImlhdCI6MTUxNjIzOTAyMn0.rn20ARVCpohOt835Y3LRZC2gq9UDlqFmvVKrmNjsJJs"
                }
            }

# Group User Account

## User Account [/account]

### Update User Account Information [PUT]

This action let's the user update their information (displayed name, email, phone number, total funds currency code).

+ displayName (string) - The user name that will be displayed in the application
+ email (string) - The user's email that will be used for login and optional notifications
+ phone (string) - The user's phone number that will be used for optional notifications

+ Request (application/json)
  
        {
            "displayName": "John Smith New Display Name",
            "email": "john.smith@mail.com",
            "phone": "+5511912345678",
            "totalFundsCurrencyCode": "USD"
        }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MCwiZGlzcGxheU5hbWUiOiJKb2huIFNtaXRoIiwiZW1haWwiOiJqb2huLnNtaXRoQG1haWwuY29tIiwicGhvbmUiOiIrNTUxMTkxMjM0NTY3OCIsImlhdCI6MTUxNjIzOTAyMn0.rn20ARVCpohOt835Y3LRZC2gq9UDlqFmvVKrmNjsJJs"
                }
            }

### Delete a User Account [DELETE]

This action marks an user account for deletion requiring delete confirmation via email.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 202 (application/json)

    + Body

            {
                "success": true
            }


## User Password [/account/password]

### Reset Forgotten Password [POST]

This action let's a user who forgot their password reset it via email.

+ userEmail (string) - The email of the user that forgot password

+ Request (application/json)

        {
            "userEmail": "john.smith@mail.com"
        }

+ Response 202 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "userEmail": "john.smith@mail.com"
                }
            }

### Change User Password [PATCH]

This action let's a logged in user change their current password.

+ oldPassword (string) - User's old password
+ newPassword (string) - User's new password

+ Request (application/json)
  
        {
            "oldPassword": "mySecretPassword",
            "newPassword": "myUpdatedPassword"
        }

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

# Group Currencies

## Currencies [/currencies]

### Get All Currencies [GET]

This action returns all categories available.

This action returns all user wallets.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    { "code": "USD", "symbol": "$", "decimalDigits": 2 },
                    { "code": "CAD", "symbol": "$", "decimalDigits": 2 },
                    { "code": "BRL", "symbol": "R$", "decimalDigits": 2 },
                    ...
                ]
            }


# Group Wallets

## User Wallets [/wallet]

### Get All User Wallets [GET]

This action returns all user wallets.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    { 
                        "id": 0,
                        "name": "Personal Wallet",
                        "description": "Wallet for my personal expenses",
                        "funds": 100000,
                        "currencyCode": "USD",
                        "decimalDigits": 2
                    },
                    { 
                        "id": 1,
                        "name": "Savings",
                        "description": "Wallet for savings",
                        "funds": 2500000,
                        "currencyCode": "USD",
                        "decimalDigits": 2
                    }
                ]
            }

### Create New Wallet [POST]

This action creates a new user wallet.

+ name (string) The wallet's name.
+ description (string) The wallet's description.
+ currencyCode (string) The currency code to be used for the wallet's funds.
+ startingFunds (number) The starting funds of the wallet.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Wallet's Name",
                "description": "Wallet's Description",
                "currencyCode": "CAD",
                "startingFunds": 0
            }

+ Response 201 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 3,
                    "name": "Wallet's Name",
                    "description": "Wallet's Description",
                    "funds": 0,
                    "currencyCode": "CAD",
                    "decimalDigits": 2
                }
            }

## User Specific Wallet [/wallet/{wallet_id}]

+ Parameters
    + wallet_id: 3 (required, number) - ID of the wallet to perform the action on.

### Get Single User Wallet [GET]

This action returns a single user wallet

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 3,
                    "name": "Wallet's Name",
                    "description": "Wallet's Description",
                    "funds": 0,
                    "currencyCode": "CAD",
                    "decimalDigits": 2
                }
            }

### Update Wallet Information [PUT]

This actions let's the user change the name or description of a wallet.

+ name (string) The wallet's name.
+ description (string) The wallet's description.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Wallet's Name",
                "description": "Wallet's Description"
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 3,
                    "name": "Updated Wallet Name",
                    "description": "Wallet's Description",
                    "funds": 0,
                    "currencyCode": "CAD",
                    "decimalDigits": 2
                }
            }

### Delete Wallet [DELETE]

This action let's the user delete a wallet and all related information.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

# Group Categories

## Expense Categories [/categories]

### Get All User's Categories [GET]

This action returns all user's expense categories.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    { 
                        "id": 0,
                        "name": "Food",
                        "description": "Category for all Food related transactions"
                    },
                    { 
                        "id": 1,
                        "name": "Rent",
                        "description": "Category for all rent payments"
                    }
                ]
            }

### Create New Category [POST]

This action creates a new expense category for the user.

+ name (string) The category's name.
+ description (string) The category's description.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Gas",
                "description": "Expenses related to fuel for my car"
            }

+ Response 201 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Gas",
                    "description": "Expenses related to fuel for my car"
                }
            }

## Specific Expense Category [/categories/{category_id}]

+ Parameters
    + category_id: 2 (required, number) - ID of the category to perform the action on.

### Get Single Expense Category [GET]

This action returns a single user's expense category.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Gas",
                    "description": "Expenses related to fuel for my car"
                }
            }

### Update Category Information [PUT]

This actions let's the user change the name or description of a category.

+ name (string) The category's name.
+ description (string) The category's description.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Updated Category Name",
                "description": "Expenses related to fuel for my car"
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Updated Category Name",
                    "description": "Expenses related to fuel for my car"
                }
            }

### Delete Category [DELETE]

This action let's the user delete a category and all related information.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

# Group Tags

## Expense Tags [/tags]

### Get All User's Tags [GET]

This action returns all user's expense tags. Tags differ from categories because expenses can have multiple tags and only a single category, also tags are optional while category is required for an expense.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    { 
                        "id": 0,
                        "name": "Friend's Payment"
                    },
                    { 
                        "id": 1,
                        "name": "Check Later"
                    }
                ]
            }

### Create New Tag [POST]

This action creates a new expense tag for the user.

+ name (string) The tag's name.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Cash Payment"
            }

+ Response 201 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Cash Payment"
                }
            }

## Specific Expense Tag [/tags/{tag_id}]

+ Parameters
    + tag_id: 2 (required, number) - ID of the tag to perform the action on.

### Get Single Expense Tag [GET]

This action returns a single user's expense tag.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Cash Payment"
                }
            }

### Update Tag Information [PUT]

This actions let's the user change the name of a tag.

+ name (string) The tag's name.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}
    
    + Body

            {
                "name": "Updated Tag Name",
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "name": "Updated Tag Name"
                }
            }

### Delete Tag [DELETE]

This action let's the user delete a tag.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

# Group Alerts

## User Alerts [/alerts]

### Get All User Alerts [GET]

This action returns all the user's alerts.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    {
                        "id": 0,
                        "alertType": "FUNDS",
                        "alertValue": 50000,
                        "alertMethod": "11",
                        "walletNome": "Personal Wallet"
                    },
                    {
                        "id": 1,
                        "alertType": "FUNDS",
                        "alertValue": 100000,
                        "alertMethod": "11"
                    },
                    {
                        "id": 2,
                        "alertType": "TRANSACTIONS",
                        "alertValue": 75000,
                        "alertMethod": "11",
                        "walletNome": "Savings",
                        "timePeriod": "YEAR"
                    },
                    {
                        "id": 3,
                        "alertType": "TRANSACTIONS",
                        "alertValue": 200000,
                        "alertMethod": "11",
                        "timePeriod": "MONTH"
                    }
                ]
            }

### Create New User Alert [POST]

This action creates a new user alert.

+ alertType (string) - Type of alert, possible values are:
    + "FUNDS": Alerts when funds reach alertValue
    + "TRANSACTIONS": Alerts when transaction value reach alertValue
+ alertValue (number) - Threshold value to alert the user
+ alertMethod (string) - Binary string of alert method, possible values are: (or any logical OR between the values)
    + "10": Email alert
    + "01": Phone alert
+ timePeriod (string) - Only used when alertType is "TRANSACTIONS", time period to sum transactions value to alert, possible values are:
    + "DAY"
    + "WEEK"
    + "MONTH"
    + "YEAR"
+ walletId (number) - Id of the wallet to check funds or transactions. If missing will check all wallets.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

    + Body

            {
                "alertType": "TRANSACTIONS",
                "alertValue": 200000,
                "alertMethod": "11",
                "timePeriod": "MONTH",
                "walletId": 0
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 4,
                    "alertType": "TRANSACTIONS",
                    "alertValue": 200000,
                    "alertMethod": "11",
                    "timePeriod": "MONTH",
                    "walletId": 0
                }
            }

## User Specific Alert [/alerts/{alert_id}]

+ Parameters
    + alert_id: 2 (required, number) - ID of the tag to perform the action on.

### Get Single User Alert [GET]

This action returns a specific user alert.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "alertType": "TRANSACTIONS",
                    "alertValue": 75000,
                    "alertMethod": "11",
                    "walletNome": "Savings",
                    "timePeriod": "YEAR"
                }
            }

### Update User Alert [PUT]

This action let's the user update an alert.

+ alertValue (number) - Threshold value to alert the user
+ alertMethod (string) - Binary string of alert method, possible values are: (or any logical OR between the values)
    + "10": Email alert
    + "01": Phone alert
+ timePeriod (string) - Only used when alertType is "TRANSACTIONS", time period to sum transactions value to alert, possible values are:
    + "DAY"
    + "WEEK"
    + "MONTH"
    + "YEAR"

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

    + Body

            {
                "alertValue": 80000,
                "alertMethod": "10",
                "timePeriod": "YEAR"
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 2,
                    "alertType": "TRANSACTIONS",
                    "alertValue": 80000,
                    "alertMethod": "10",
                    "walletNome": "Savings",
                    "timePeriod": "YEAR"
                }
            }

### Delete User Alert [DELETE]

This action let's the user delete an alert.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

# Group Transactions

## User Transactions [/transactions]

### Get User Transactions [GET]

This actions let's the user get all their transactions.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": [
                    {
                        "id": 0,
                        "value": -10000,
                        "description": "New Keyboard",
                        "timestamp": "1629947272",
                        "category": 1,
                        "tags": [
                            2
                        ],
                        "walletId": 0
                    }
                ]
            }

### Create New Transaction [POST]

This action let's the user create a new transaction.

+ value (number) - Value of the transaction
+ description (string) - Description of the transaction
+ reason (string) - Reason of the transaction
+ timestamp (string) - Timestamp of the transaction, if empty the timestamp is set on server to now
+ locationName (string) - Name of the location of the transaction
+ locationLatLng (latlng) - Latitude and Longitude of the transaction
+ categoryId (number) - Id of the category of the transaction
+ walletId (number) - Id of the wallet used for the transaction
+ tags (number[]) - Array of tag ids for this transaction

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

    + Body
            
            {
                "value": -4000,
                "description": "Pizza treat",
                "reason": "Reward for acing the test",
                "timestamp": "1629947272",
                "locationName": "Pizza Restaurant",
                "locationLatLng": { "lat": -12.3221, "lng": 12.3221 },
                "categoryId": 2,
                "walletId": 1,
                "tags": [0, 1]
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 1,
                    "value": -4000,
                    "description": "Pizza treat",
                    "expenseTimestamp": "1629947272",
                    "categoryId": 2,
                    "locationName": "Pizza Restaurant",
                    "locationLatLng": { "lat": -12.3221, "lng": 12.3221 },
                    "tags": [
                        0,
                        1
                    ],
                    "walletId": 1
                }
            }

## Specific User Transaction [/transactions/{transaction_id}]

+ Parameters
    + transaction_id: 1 (required, number) - ID of the transaction to perform the action on.

### Get Single Transaction [GET]

This action returns a single transaction.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 1,
                    "value": -4000,
                    "description": "Pizza treat",
                    "expenseTimestamp": "1629947272",
                    "category": "Food",
                    "locationName": "Pizza Restaurant",
                    "locationLatLng": { "lat": -12.3221, "lng": 12.3221 },
                    "tags": [
                        "Treat",
                        "Fast Food"
                    ],
                    "walletName": "Treats Savings"
                }
            }

### Update Transaction [PUT]

This action lets the user update a transaction.

+ value (number) - Value of the transaction
+ description (string) - Description of the transaction
+ reason (string) - Reason of the transaction
+ timestamp (string) - Timestamp of the transaction, if empty the timestamp is set on server to now
+ locationName (string) - Name of the location of the transaction
+ locationLatLng (latlng) - Latitude and Longitude of the transaction
+ categoryId (number) - Id of the category of the transaction
+ walletId (number) - Id of the wallet used for the transaction
+ tags (number[]) - Array of tag ids for this transaction

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

    + Body
            
            {
                "value": -4000,
                "description": "Pizza treat",
                "reason": "Reward for acing the test",
                "timestamp": "1629947272",
                "locationName": "New Pizza Restaurant",
                "locationLatLng": { "lat": -12.3221, "lng": 12.3221 },
                "categoryId": 2,
                "walletId": 1,
                "tags": [0]
            }

+ Response 200 (application/json)

    + Body

            {
                "success": true,
                "data": {
                    "id": 1,
                    "value": -4000,
                    "description": "Pizza treat",
                    "expenseTimestamp": "1629947272",
                    "categoryId": 2,
                    "locationName": "New Pizza Restaurant",
                    "locationLatLng": { "lat": -12.3221, "lng": 12.3221 },
                    "tags": [
                        0
                    ],
                    "walletId": 1
                }
            }

### Delete Transaction [DELETE]

This action deletes a transaction.

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {user_jwt}

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }
